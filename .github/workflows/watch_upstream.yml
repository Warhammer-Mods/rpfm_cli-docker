name: Fetch upstream

on:
  schedule:
    - cron:  '0 5,17 * * *'
  workflow_dispatch:

env:
  api: https://api.github.com
  registry: ghcr.io
  upstream: Frodo45127/rpfm
  extra_branches: "[ 'develop' ]"

jobs:

  get-branches:

    runs-on: ubuntu-latest
    outputs:
      default-branch: ${{ steps.get-branches.outputs.default-branch }}
      branches: ${{ steps.get-branches.outputs.branches }}
    steps:
      - name: Get raw values
        id: raw
        run: >
          echo "::set-output name=repo::$(
          curl -sL ${{ env.api }}/repos/${{ env.upstream }}
          )"

      - name: Get default branch
        id: get-branches
        run: >
          echo "${{ fromJSON( steps.raw.outputs.repo ).default_branch }}"
          > default_branch.json

          jq . default_branch.json

          echo "::set-output name=default-branch:$(
          cat default_branch.json
          )"

          echo "${{ fromJSON(env.extra_branches) }}"
          > extra_branches.json

          echo "$(cat extra_branches.json)"

          echo "::set-output name=branches::$(
          (cat default_branch.json ; cat extra_branches.json)
          | jq -rc '. + input'
          ")

  fetch:

    needs: get-branches
    runs-on: ubuntu-latest

    outputs:
      repository-name: ${{ steps.init.outputs.repository-name }}
      built-tags: ${{ steps.facts.outputs.built-tags }}
      latest-tag: ${{ steps.upstream.outputs.latest-tag }}
      latest-tag-normalized: ${{ steps.tag.outputs.normalized-tag }}
      latest-tag-sha: ${{ steps.upstream.outputs.latest-tag-sha }}
    steps:

      - name: Init
        id: init
        run: >
          echo "::set-output name=repository-name::$(
          echo '${{ github.repository }}'
          | awk -F '/' '{print $2}'
          )"

      - name: Get info
        id: facts
        run: |
          type=$(
            curl -sL --fail \
              --header 'Accept: application/vnd.github.v3+json' \
              -u ${{ github.actor }}:${{ secrets.BOT_TOKEN }} \
              'https://api.github.com/users/${{ github.actor }}'
            | jq -r -c '.type'
          )

          case $type in
            User)
              type="users"
              ;;
            Organization)
              type="orgs"
              ;;
          esac

          echo "::set-output name=branch::$(
            curl -sL ${{ env.api }}/repos/${{ env.upstream }}
            | jq -r '.default_branch'
          )"

          echo "::set-output name=built_tags::$(
            curl -sL --fail
              --header 'Accept: application/vnd.github.v3+json' \
              -u ${{ github.actor }}:${{ secrets.BOT_TOKEN }} \
              'https://api.github.com/${type}/${{ github.repository_owner }}/packages/container/${{ steps.init.outputs.repository_name }}/versions'
            | jq -r -c '[ .[].metadata.container.tags[] | tojson ]'
          )"

      - name: Fetch upstream
        id: upstream
        run: |
          echo "::set-output name=tag::$(
            curl -sL \
              ${{ env.api }}/repos/${{ env.upstream }}/releases/latest
            | jq -r '.tag_name'
          )"
          
          echo "::set-output name=tag_sha::$(
            curl -sL \
              ${{ env.api }}/repos/${{ env.upstream }}/releases/latest
            | jq -r '.target_commitish'
          )"
          
          echo "::set-output name=sha::$(
            curl -sL \
              ${{ env.api }}/repos/${{ env.upstream }}/commits/${{ steps.facts.outputs.default_branch }}
            | jq -r '.sha'
          )"

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3.4.1
        with:
          github-token: ${{ github.token }}
          images: ${{ env.registry }}/${{ github.repository }}
          tags: |
            type=semver,priority=900,pattern={{version}},value=${{ steps.upstream.outputs.tag }}

      - name: Get normalized tag name
        id: tag
        run: |
          echo "::set-output name=normalized_tag::${{ 
              fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version']
            }}"
          
      - name: Gathered facts
        run: |
          echo "::group::Watched branches"
          echo "${{ toJSON(needs.get-branches.outputs.branches) }}"
          echo "::endgroup::"
          echo "Latest tag: ${{ steps.upstream.outputs.latest-tag }}"
          echo "Latest tag SHA: ${{ steps.upstream.outputs.latest-tag-sha }}"
          echo "Latest commit SHA: ${{ steps.upstream.outputs.latest-sha }}"
          echo "::group::Existing tags for ghcr.io/${{ github.repository }}"
          echo "${{ toJSON(steps.facts.outputs.built_tags) }}"
          echo "::endgroup::"
          echo "Running Build Tag task?"
          echo "${{ ! contains( steps.facts.outputs.built_tags,
            steps.tag.outputs.normalized_tag ) }}"
          echo "Running Build Branch task?"
          echo "${{ ! contains( steps.facts.outputs.built_tags,
            steps.upstream.outputs.sha ) }}"
          
      - name: Repository Dispatch — Build Tag
        uses: peter-evans/repository-dispatch@v1.1.3
        with:
          token: ${{ secrets.BOT_TOKEN }}
          event-type: trigger-ci
          client-payload: >
            {
            "profile": "release",
            "ref": "${{ steps.upstream.outputs.tag }}",
            "sha": "${{ steps.upstream.outputs.tag_sha }}",
            "branch": "${{ steps.facts.outputs.branch }}",
            "upstream": "https://github.com/${{ env.upstream }}.git"
            }

      - name: Repository Dispatch — Build Branch
        if: >
          ${{ ! contains(
          fromJSON(needs.fetch.outputs.built-tags),
          steps.upstream.outputs.latest-sha
          ) }}
        uses: peter-evans/repository-dispatch@v1.1.3
        with:
          token: ${{ secrets.BOT_TOKEN }}
          event-type: trigger-ci
          client-payload: >
            {
            "profile": "debug",
            "ref": "${{ steps.facts.outputs.branch }}",
            "sha": "${{ steps.upstream.outputs.sha }}",
            "branch": "${{ steps.facts.outputs.branch }}",
            "upstream": "https://github.com/${{ env.upstream }}.git"
            }
